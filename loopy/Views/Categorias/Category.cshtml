<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestión de Categorías</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        .floating-button {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 50%;
            width: 60px;
            height: 60px;
            font-size: 24px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .floating-button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>

<div class="container mt-4">
    <h2 class="mb-4">Gestión de Categorías</h2>
    <div class="table-responsive">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Categoria</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody id="categorias-table">
                <!-- Categorías dinámicas -->
            </tbody>
        </table>
    </div>
</div>

<!-- Botón flotante para agregar categorías -->
<button class="floating-button" onclick="agregarFila()">
    <i class="fas fa-plus"></i>
</button>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
document.addEventListener('DOMContentLoaded', async () => {
    await cargarCategorias();
});

async function cargarCategorias() {
    try {
        const response = await fetch('/api'); // Corregido el endpoint
        const categorias = await response.json();
        const tbody = document.getElementById('categorias-table');
        tbody.innerHTML = '';

        categorias.forEach(categoria => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${categoria.id}</td>
                <td>${categoria.nombre}</td>
                <td>
                    <button class="btn btn-sm btn-outline-secondary" onclick="editarCategoria(${categoria.id}, '${categoria.nombre}')"><i class="fas fa-edit"></i></button>
                    <button class="btn btn-sm btn-outline-danger" onclick="eliminarCategoria(${categoria.id})"><i class="fas fa-trash"></i></button>
                </td>

            `;
            tbody.appendChild(row);
        });
    } catch (error) {
        console.error('Error cargando categorías:', error);
    }
}

function agregarFila() {
    const tbody = document.getElementById('categorias-table');
    const newRow = document.createElement('tr');

    newRow.innerHTML = `
        <td>Nuevo</td>
        <td><input type="text" class="form-control" id="nuevo-nombre" placeholder="Nueva categoría"></td>
        <td>
            <button class="btn btn-sm btn-success" onclick="guardarCategoria(this)">✔</button>
            <button class="btn btn-sm btn-danger" onclick="this.parentElement.parentElement.remove()">✖</button>
        </td>
    `;

    tbody.appendChild(newRow);
}

async function guardarCategoria(button) {
    const input = button.parentElement.parentElement.querySelector('input');
    const nombre = input.value.trim();

    if (!nombre) {
        Swal.fire({
            icon: 'warning',
            title: 'Campo vacío',
            text: 'Ingresa un nombre de categoría.',
        });
        return;
    }

    try {
        const response = await fetch('/api/create', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ nombre })
        });

        const data = await response.json();

        if (response.ok) {
            Swal.fire({
                icon: 'success',
                title: '¡Éxito!',
                text: 'Categoría creada correctamente.',
                timer: 2000,
                showConfirmButton: false
            });

            await cargarCategorias(); // Recargar categorías
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.message || 'No se pudo crear la categoría.',
            });
        }
    } catch (error) {
        console.error('Error al guardar categoría:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error inesperado',
            text: 'Ocurrió un error al guardar la categoría.',
        });
    }
}

async function editarCategoria(id, nombreActual) {
    const { value: nuevoNombre } = await Swal.fire({
        title: 'Editar Categoría',
        input: 'text',
        inputValue: nombreActual,
        showCancelButton: true,
        confirmButtonText: 'Guardar',
        cancelButtonText: 'Cancelar',
        inputValidator: (value) => {
            if (!value) return 'El nombre no puede estar vacío';
        }
    });

    if (!nuevoNombre) return; // Si cancela, no hace nada

    try {
        const response = await fetch(`/api/update/${id}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ nombre: nuevoNombre })
        });

        const data = await response.json();
        if (!response.ok) throw new Error(data.message || 'Error al actualizar');

        Swal.fire('¡Actualizado!', data.message, 'success');
        cargarCategorias(); // Recargar la tabla
    } catch (error) {
        Swal.fire('Error', error.message, 'error');
    }
}


async function eliminarCategoria(id) {
    const confirmacion = await Swal.fire({
        title: '¿Estás seguro?',
        text: 'Esta acción no se puede deshacer',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Sí, eliminar',
        cancelButtonText: 'Cancelar'
    });

    if (!confirmacion.isConfirmed) return; // Si cancela, no hace nada

    try {
        const response = await fetch(`/api/delete/${id}`, { method: 'DELETE' });
        const data = await response.json();
        if (!response.ok) throw new Error(data.message || 'Error al eliminar');

        Swal.fire('¡Eliminado!', data.message, 'success');
        cargarCategorias(); // Recargar la tabla
    } catch (error) {
        Swal.fire('Error', error.message, 'error');
    }
}
</script>

</body>
</html>
