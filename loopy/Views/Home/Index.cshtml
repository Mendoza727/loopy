@{
    ViewData["Title"] = "Home";
}

<h2 class="mb-4">Productos</h2>
<div class="container">
    <div class="row">
        <div class="col-9">
            <form class="d-flex ms-auto me-3">
                <input id="search-bar" class="form-control search-bar" type="search" placeholder="Buscar"
                    aria-label="Buscar">
            </form>
        </div>
        <div class="col-1">
            <div class="custom-select-wrapper">
                <select class="custom-select product-select">
                    <option value="" disabled selected>Seleccione una opción</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Contenedor donde se mostrarán los productos -->
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4 g-4 mb-5" id="productos-container">
        <!-- Los productos se insertarán aquí dinámicamente -->
    </div>
</div>

<!-- Botón flotante para abrir el modal -->
<button class="btn btn-primary floating-btn" data-bs-toggle="modal" data-bs-target="#agregarProductoModal">
    +
</button>

<!-- Modal para añadir un producto -->
<div class="modal fade" id="agregarProductoModal" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalLabel">Agregar Producto</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="productoForm">
                    <div class="mb-3">
                        <label for="nombre" class="form-label">Nombre</label>
                        <input type="text" class="form-control" id="nombre" required>
                    </div>
                    <div class="mb-3">
                        <label for="cantidad" class="form-label">Cantidad</label>
                        <input type="number" class="form-control" id="cantidad" required>
                    </div>
                    <div class="mb-3">
                        <label for="precio" class="form-label">Precio</label>
                        <input type="number" step="0.01" class="form-control" id="precio" required>
                    </div>
                    <div class="mb-3">
                        <label for="imagen" class="form-label">Subir Imagen</label>
                        <input type="file" class="form-control" id="imagen">
                    </div>
                    <div class="mb-3">
                        <label for="categoria" class="form-label">Categoría</label>
                        <select class="form-select" id="categoria">
                            <option value="" disabled selected>Seleccione una categoría</option>
                        </select>
                    </div>
                    <button type="submit" class="btn btn-success">Guardar</button>
                </form>
            </div>
        </div>
    </div>
</div>

@* edit *@
<div class="modal fade" id="editarProductoModal" tabindex="-1" aria-labelledby="editarModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editarModalLabel">Editar Producto</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editarProductoForm">
                    <input type="hidden" id="productoId">
                    <div class="mb-3">
                        <label for="editarNombre" class="form-label">Nombre</label>
                        <input type="text" class="form-control" id="editarNombre" required>
                    </div>
                    <div class="mb-3">
                        <label for="editarCantidad" class="form-label">Cantidad</label>
                        <input type="number" class="form-control" id="editarCantidad" required>
                    </div>
                    <div class="mb-3">
                        <label for="editarPrecio" class="form-label">Precio</label>
                        <input type="number" step="0.01" class="form-control" id="editarPrecio" required>
                    </div>
                    
                    <!-- Botón para cambiar entre subir archivo o ingresar URL -->
                    <div class="mb-3">
                        <button type="button" class="btn btn-secondary btn-sm" id="toggleImagen">Usar URL en lugar de archivo</button>
                    </div>

                    <!-- Campo para subir archivo -->
                    <div class="mb-3" id="inputFileContainer">
                        <label for="imagen" class="form-label">Subir Imagen</label>
                        <input type="file" class="form-control" id="imagen">
                    </div>

                    <!-- Campo para ingresar URL de imagen (oculto por defecto) -->
                    <div class="mb-3 d-none" id="inputUrlContainer">
                        <label for="imagenUrl" class="form-label">URL de la Imagen</label>
                        <input type="text" class="form-control" id="imagenUrl">
                    </div>

                    <div class="mb-3">
                        <label for="editarImagen" class="form-label">Imagen Actual</label>
                        <img id="imagenPreview" src="https://via.placeholder.com/150" alt="Imagen del producto"
                            class="img-fluid">
                    </div>
                    <div class="mb-3">
                        <label for="editarCategoria" class="form-label">Categoría</label>
                        <select class="form-select" id="editarCategoria">
                            <option value="" disabled selected>Seleccione una categoría</option>
                        </select>
                    </div>
                    <button type="submit" class="btn btn-primary">Actualizar</button>
                </form>
            </div>
        </div>
    </div>
</div>



<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.getElementById("toggleImagen").addEventListener("click", function () {
        let fileContainer = document.getElementById("inputFileContainer");
        let urlContainer = document.getElementById("inputUrlContainer");

        if (fileContainer.classList.contains("d-none")) {
            // Mostrar input de archivo y ocultar URL
            fileContainer.classList.remove("d-none");
            urlContainer.classList.add("d-none");
            this.textContent = "Usar URL en lugar de archivo";
        } else {
            // Mostrar input de URL y ocultar archivo
            fileContainer.classList.add("d-none");
            urlContainer.classList.remove("d-none");
            this.textContent = "Subir archivo en lugar de URL";
        }
    });
    
    document.addEventListener("DOMContentLoaded", function () {
        fetch('/productos') // Llamamos a la API
            .then(response => response.json())
            .then(data => {
                let productosContainer = document.getElementById("productos-container");
                productosContainer.innerHTML = ""; // Limpiar contenido anterior

                if (data.length === 0) {
                    productosContainer.innerHTML = `
                            <div class="col-12 d-flex flex-column align-items-center justify-content-center empty-container">
                                <p class="text-muted">Sin información disponible</p>
                                <button class="btn btn-primary mt-2" data-bs-toggle="modal" data-bs-target="#agregarProductoModal">Agregar producto</button>
                            </div>
                        `;
                } else {
                    data.forEach(producto => {
                        let productoHTML = `
                            <div class="col mt-5">
                                <div class="card h-100 product-card position-relative">
                                    <img src="${producto.imagenUrl || 'https://via.placeholder.com/150'}" class="card-img-top" alt="${producto.nombre}">

                                    <!-- Botones de editar y eliminar -->
                                    <div class="position-absolute top-0 end-0 m-2 d-flex gap-2">
                                        <button class="btn btn-sm btn-warning" onclick="editarProducto(${producto.id})">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-danger" onclick="eliminarProducto(${producto.id})">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                    </div>

                                    <div class="card-body">
                                        <h5 class="card-title">${producto.nombre}</h5>
                                        <p class="text-muted">Cantidad: ${producto.cantidad}</p>
                                        <div class="d-flex justify-content-between align-items-center">
                                            <p class="price fw-bold">$${producto.precio}</p>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            `;
                        productosContainer.innerHTML += productoHTML;
                    });
                }
            })
            .catch(error => console.error("Error al obtener productos:", error));

        // Capturar el evento de envío del formulario
        document.getElementById("productoForm").addEventListener("submit", function (event) {
            event.preventDefault(); // Evitar recarga

            let nombre = document.getElementById("nombre").value;
            let cantidad = document.getElementById("cantidad").value;
            let precio = document.getElementById("precio").value;
            let imagen = document.getElementById("imagen").files[0]; // Obtener imagen
            let categoriaId = document.getElementById("categoria").value; // Debe ser solo el ID

            console.log(categoriaId);

            let formData = new FormData();
            formData.append("nombre", nombre);
            formData.append("cantidad", cantidad);
            formData.append("precio", precio);
            formData.append("imagen", imagen);
            formData.append("categoria", categoriaId);

            fetch("/productos/crear", {
                method: "POST",
                body: formData
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Error en la respuesta del servidor");
                    }
                    return response.text();
                })
                .then(text => text ? JSON.parse(text) : {}) // Si no hay texto, retorna un objeto vacío
                .then(data => {
                    alert(data.message || "Producto agregado correctamente");
                    document.getElementById("productoForm").reset();
                    document.querySelector("#agregarProductoModal .btn-close").click();
                    location.reload();
                })
                .catch(error => console.error("Error al agregar producto:", error))
        });
    });

    async function cargarCategorias() {
        try {
            const response = await fetch('/api'); // Ajusta el endpoint según tu API
            const categorias = await response.json();

            const selects = [
                document.getElementById("categoria"),
                document.getElementById("editarCategoria"),
                document.querySelector(".product-select")
            ];

            selects.forEach(select => {
                if (select) {
                    select.innerHTML = '<option value="" disabled selected>Seleccione una opción</option>'; // Limpiar opciones previas

                    categorias.forEach(categoria => {
                        let option = document.createElement("option");
                        option.value = categoria.id; // ID como value
                        option.textContent = categoria.nombre; // Nombre como texto visible
                        select.appendChild(option);
                    });
                }
            });
        } catch (error) {
            console.error('Error cargando categorías:', error);
        }
    }

    // Llamar a la función al cargar la página
    document.addEventListener("DOMContentLoaded", cargarCategorias);

    function eliminarProducto(id) {
        Swal.fire({
            title: "¿Estás seguro?",
            text: "Esta acción no se puede deshacer.",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#3085d6",
            confirmButtonText: "Sí, eliminar",
            cancelButtonText: "Cancelar"
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`/productos/eliminar/${id}`, { method: "DELETE" })
                    .then((response) => response.json())
                    .then((data) => {
                        Swal.fire("Eliminado", data.message, "success");
                        location.reload(); // Recargar la página
                    })
                    .catch((error) => {
                        Swal.fire("Error", "No se pudo eliminar el producto", "error");
                        console.error("Error eliminando producto:", error);
                    });
            }
        });
    }


    function editarProducto(id) {
        fetch(`/productos/${id}`)
            .then((response) => response.json())
            .then((producto) => {
                console.log(producto); // Verifica si el producto se carga correctamente

                if (!producto || producto.message) {
                    Swal.fire("Error", "Producto no encontrado", "error");
                    return;
                }

                // Usar los IDs correctos
                document.getElementById("productoId").value = producto.id;
                document.getElementById("editarNombre").value = producto.nombre;
                document.getElementById("editarCantidad").value = producto.cantidad;
                document.getElementById("editarPrecio").value = producto.precio;

                // Mostrar la imagen en un <img> para vista previa
                let imagenPreview = document.getElementById("imagenPreview");
                if (imagenPreview) {
                    imagenPreview.src = producto.imagenUrl ? producto.imagenUrl : "https://via.placeholder.com/150";
                }

                let modal = new bootstrap.Modal(document.getElementById("editarProductoModal"));
                modal.show();
            })
            .catch((error) => {
                Swal.fire("Error", "No se pudo obtener el producto", "error");
                console.error("Error al obtener el producto:", error);
            });
    }
</script>

<style>
    .floating-btn {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 50px;
        height: 50px;
        border-radius: 50%;
        font-size: 24px;
        font-weight: bold;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .empty-container {
        height: 50vh;
        text-align: center;
    }
</style>
